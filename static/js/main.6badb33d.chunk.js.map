{"version":3,"sources":["Components/navBar.jsx","Components/TaskToDo.jsx","Components/Completed.jsx","Components/main.jsx","App.js","serviceWorker.js","index.js"],"names":["NavBar","react_default","a","createElement","className","style","textAlign","display","TaskToDO","props","onClick","Completed","id","taskData","Delete","reDo","doneData","ToDo","state","Done","addTask","_this","push","refs","textInput","value","setState","localStorage","setItem","val","splice","_this$state","this","getItem","split","map","todo","console","log","done","_this2","Fragment","type","ref","placeholder","i","TaskToDo","key","indexOf","Components_Completed","Component","App","navBar","main","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6badb33d.chunk.js","sourcesContent":["import React from \"react\";\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"bg-success\">\r\n      <nav\r\n        style={{ textAlign: \"center\", display: \"block\" }}\r\n        className=\"navbar  bg-success navbar-expand-lg navbar-light\"\r\n      >\r\n        <span className=\"navbar-brand text-light \">To-Do List</span>\r\n      </nav>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","import React from \"react\";\r\nconst TaskToDO = props => {\r\n  return (\r\n    <div className=\"mx-5 showTask\">\r\n      <button\r\n        className=\"bg-secondary tick commonstyle2 text-light\"\r\n        onClick={() => {\r\n          props.Completed(props.id, \"toDoDone\");\r\n        }}\r\n      >\r\n        &#10003;\r\n      </button>\r\n      <span className=\"mt-3 text-light bg-dark commonstyle1 taskToDo\">\r\n        {props.taskData}\r\n        <button\r\n          className=\"bg-danger tickright commonstyle2 text-light\"\r\n          onClick={() => {\r\n            props.Delete(props.id, \"PermanentDelete\");\r\n          }}\r\n        >\r\n          &#10005;\r\n        </button>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TaskToDO;\r\n","import React from \"react\";\r\nconst Completed = props => {\r\n  return (\r\n    <div className=\"mx-5 showTask\">\r\n      <button\r\n        className=\"bg-success tick commonstyle2 text-light\"\r\n        onClick={() => {\r\n          props.reDo(props.id, \"toDoNotDone\");\r\n        }}\r\n      >\r\n        &#10003;\r\n      </button>\r\n      <span className=\"mt-3 text-light bg-secondary commonstyle1 Done\">\r\n        {props.doneData}\r\n        <button\r\n          className=\"bg-danger tickright commonstyle2 text-light\"\r\n          onClick={() => {\r\n            props.Delete(props.id, \"PermanentDeleteDone\");\r\n          }}\r\n        >\r\n          &#10005;\r\n        </button>\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Completed;\r\n","import React, { Component } from \"react\";\r\nimport TaskToDo from \"./TaskToDo\";\r\nimport Completed from \"./Completed\";\r\n\r\nclass ToDo extends Component {\r\n  state = {\r\n    ToDo: [],\r\n    Done: []\r\n  };\r\n  componentDidMount() {\r\n    const { ToDo, Done } = this.state;\r\n    localStorage.getItem(\"Data\")\r\n      ? localStorage\r\n          .getItem(\"Data\")\r\n          .split(\",\")\r\n          .map(todo => {\r\n            ToDo.push(todo);\r\n            return 1;\r\n          })\r\n      : console.log(\"Nothing in Here\");\r\n\r\n    localStorage.getItem(\"DoneData\")\r\n      ? localStorage\r\n          .getItem(\"DoneData\")\r\n          .split(\",\")\r\n          .map(done => {\r\n            Done.push(done);\r\n            return 1;\r\n          })\r\n      : console.log(\"Nothing in Here\");\r\n    this.setState({ ToDo, Done });\r\n  }\r\n  render() {\r\n    return (\r\n      <React.Fragment>\r\n        <div className=\"mx-5\">\r\n          <input\r\n            type=\"text\"\r\n            ref=\"textInput\"\r\n            className=\"bg-dark mt-3 text-light styletype1 commonstyle1\"\r\n            placeholder=\"To-Do Task\"\r\n          />\r\n          <button\r\n            className=\"bg-warning mt-3 tick commonstyle2\"\r\n            onClick={this.addTask}\r\n          >\r\n            +\r\n          </button>\r\n        </div>\r\n\r\n        <div className=\"addTaskHere\">\r\n          {this.state.ToDo.map((todo, i) => {\r\n            return (\r\n              <TaskToDo\r\n                key={i}\r\n                taskData={todo}\r\n                Completed={this.Completed}\r\n                Delete={this.Delete}\r\n                id={this.state.ToDo.indexOf(todo)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n\r\n        <div className=\"addTaskHere\">\r\n          {this.state.Done.map((done, i) => {\r\n            return (\r\n              <Completed\r\n                key={i}\r\n                doneData={done}\r\n                reDo={this.Completed}\r\n                Delete={this.Delete}\r\n                id={this.state.Done.indexOf(done)}\r\n              />\r\n            );\r\n          })}\r\n        </div>\r\n      </React.Fragment>\r\n    );\r\n  }\r\n  addTask = () => {\r\n    let ToDo = this.state.ToDo;\r\n    ToDo.push(this.refs.textInput.value);\r\n    this.setState({ ToDo });\r\n    this.refs.textInput.value = \"\";\r\n    localStorage.setItem(\"Data\", ToDo);\r\n  };\r\n  Completed = (id, val) => {\r\n    let ToDo = this.state.ToDo;\r\n    let Done = this.state.Done;\r\n    if (val === \"toDoDone\") {\r\n      Done.push(ToDo.splice(id, 1)[0]);\r\n      localStorage.setItem(\"DoneData\", Done);\r\n      localStorage.setItem(\"Data\", ToDo);\r\n    } else if (val === \"toDoNotDone\") {\r\n      ToDo.push(Done.splice(id, 1)[0]);\r\n      localStorage.setItem(\"DoneData\", Done);\r\n      localStorage.setItem(\"Data\", ToDo);\r\n    }\r\n    this.setState({ ToDo, Done });\r\n  };\r\n  Delete = (id, val) => {\r\n    let ToDo = this.state.ToDo;\r\n    let Done = this.state.Done;\r\n    if (val === \"PermanentDelete\") {\r\n      ToDo.splice(id, 1);\r\n      localStorage.setItem(\"Data\", ToDo);\r\n    } else {\r\n      Done.splice(id, 1);\r\n      localStorage.setItem(\"DoneData\", Done);\r\n    }\r\n\r\n    this.setState({ ToDo, Done });\r\n  };\r\n}\r\n\r\nexport default ToDo;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport NavBar from \"./Components/navBar\";\nimport ToDo from \"./Components/main\";\nimport \"./Components/main.css\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <NavBar />\n      <ToDo />\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}